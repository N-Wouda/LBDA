#include <iostream>

#include "gurobi_c++.h"
#include "gurobi_c.h"

using namespace std;

int main(int argc, char *argv[])
{  
  GRBenv *env;
  GRBloadenv(&env, NULL);
  
  GRBmodel *model;
  GRBnewmodel(env, &model, NULL, 0, NULL, NULL, NULL, NULL, NULL);  
  
  double c[] = {2,5};
  
  GRBaddvars(model, 2, 0, NULL, NULL, NULL, c, NULL, NULL, NULL, NULL);
  
  int cind[] = {0, 1};
  double first_row[] = {1, 3};
  double second_row[] = {2, 2};
  
  
  GRBaddconstr(model, 2, cind, first_row, GRB_EQUAL, 5.0, NULL);
  GRBaddconstr(model, 2, cind, second_row, GRB_EQUAL, 8.0, NULL);
  GRBwrite(model, "test.lp");
  
  GRBoptimize(model);
  double vals[2];
  cout << "error:" << GRBgetdblattrarray(model, "X", 0, 2, vals) << '\n';
  cout << "C0: " << vals[0] << " C1: " << vals[1] << '\n'; 
  
  int bhead[2];
  GRBgetBasisHead(model, bhead);
  cout << "BASIC VARS: " << bhead[0] << ' ' << bhead[1] << '\n';

  
  
  
  
  GRBsvec tableau[2];
  
  tableau[0].len = 4;
  int ind[4]; tableau[0].ind = ind;  
  double val[4]; tableau[0].val = val;
  
  tableau[1].len = 4;
  int ind_2[4]; tableau[1].ind = ind_2;  
  double val_2[4]; tableau[1].val = val_2;
  
  for (size_t row = 0; row != 2; ++ row)
    GRBBinvRowi(model, row, tableau + row);
    
  cout << "TABLEAU\n";
  for (size_t row = 0; row != 2; ++ row)
  {
    for (size_t var = 0; var != 4; ++var)
    {
      double val = 0;
      for (size_t idx = 0; idx != tableau[row].len; ++idx)
      {
        if (tableau[row].ind[idx] == var)
          val = tableau[row].val[idx];
      }
      

      cout << val << ' ';    
    
    
    }
    cout << '\n';
  }
  
  


  


}